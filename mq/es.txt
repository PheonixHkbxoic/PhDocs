


## ElasticSearch

### cat命令
curl -XGET http://localhost:9200/_cat
=^.^=
/_cat/allocation
/_cat/shards
/_cat/shards/{index}
/_cat/master
/_cat/nodes
/_cat/tasks
/_cat/indices
/_cat/indices/{index}
/_cat/segments
/_cat/segments/{index}
/_cat/count
/_cat/count/{index}
/_cat/recovery
/_cat/recovery/{index}
/_cat/health
/_cat/pending_tasks
/_cat/aliases
/_cat/aliases/{alias}
/_cat/thread_pool
/_cat/thread_pool/{thread_pools}
/_cat/plugins
/_cat/fielddata
/_cat/fielddata/{fields}
/_cat/nodeattrs
/_cat/repositories
/_cat/snapshots/{repository}
/_cat/templates
/_cat/ml/anomaly_detectors
/_cat/ml/anomaly_detectors/{job_id}
/_cat/ml/trained_models
/_cat/ml/trained_models/{model_id}
/_cat/ml/datafeeds
/_cat/ml/datafeeds/{datafeed_id}
/_cat/ml/data_frame/analytics
/_cat/ml/data_frame/analytics/{id}
/_cat/transforms
/_cat/transforms/{transform_id}



#### cat通用参数
参数名	指令示例	功能
Verbose	GET /_cat/XXX/?v	开启详细输出
Help	GET /_cat/XXX/?help	输出可用的列
Headers	GET /_cat/XXX/?h=column1,column2	指定输出的列
Sort	GET /_cat/XXX/?v&s=column1,column2:desc,column3	指定输出的列进行排序，默认按照升序排序
Format	GET /_cat/XXX?format=json	指定响应返回的数据格式：text（默认）,json,yaml,smile,cbor。
（通过设置Accept的HTTP头部的多媒体格式的优先级更高）


#### cat常用命令
查询所有索引信息
curl -XGET http://localhost:9200/_cat/indices?v
health status index                            uuid                   pri rep docs.count docs.deleted store.size pri.store.size
green  open   .apm-custom-link                 OfKc-jicQiq5Aeaq3vB12w   1   0          0            0       208b           208b
green  open   .kibana-event-log-7.9.1-000001   yzwmht0QQcav5EMT1ME2GA   1   0          2            0     10.9kb         10.9kb
green  open   .kibana_task_manager_1           VevItDUvThiZK4oqZrt1fw   1   0          6         2919    389.7kb        389.7kb
green  open   .apm-agent-configuration         MP9LwKvtQxGQJhzcKLLqqg   1   0          0            0       208b           208b
yellow open   book                             RGo65wLDRBm095_T-KF8aQ   1   1          9            0     19.5kb         19.5kb
yellow open   filebeat-7.9.1-2020.09.07-000001 Kw5WTp4iSgqOidG2YnXF1g   1   1          0            0       208b           208b
green  open   .async-search                    W9Xl8X1TRU63Q3vbOJhc5A   1   0          0            0      3.5kb          3.5kb
green  open   .kibana_1                        PtHkC1p1T-G1wAYbUqsgqQ   1   0       1564           14     11.1mb         11.1mb

查询某个索引信息
curl -XGET http://localhost:9200/_cat/indices/book?v
health status index uuid                   pri rep docs.count docs.deleted store.size pri.store.size
yellow open   book  RGo65wLDRBm095_T-KF8aQ   1   1          9            0     19.5kb         19.5kb

查询集群健康状态
curl -XGET http://localhost:9200/_cat/health?v
epoch      timestamp cluster       status node.total node.data shards pri relo init unassign pending_tasks max_task_wait_time active_shards_percent
1599549579 07:19:39  elasticsearch yellow          1         1      9   9    0    0        2             0                  -                 81.8%

查询集群节点信息
curl -XGET http://localhost:9200/_cat/nodes?v
ip        heap.percent ram.percent cpu load_1m load_5m load_15m node.role master name
127.0.0.1           34          85   4                          dilmrt    *      LAPTOP-5QOUSSPO


### 索引的查询
curl -XGET http://localhost:9200/book?pretty
{
  "book" : {
    "aliases" : { },
    "mappings" : {
      "properties" : {
        "content" : {
          "type" : "text",
          "fields" : {
            "keyword" : {
              "type" : "keyword",
              "ignore_above" : 256
            }
          }
        },
        "page" : {
          "type" : "long"
        }
      }
    },
    "settings" : {
      "index" : {
        "creation_date" : "1599466763200",
        "number_of_shards" : "1",
        "number_of_replicas" : "1",
        "uuid" : "RGo65wLDRBm095_T-KF8aQ",
        "version" : {
          "created" : "7090199"
        },
        "provided_name" : "book"
      }
    }
  }
}


curl -XGET http://localhost:9200/book/_settings?pretty
{
  "book" : {
    "settings" : {
      "index" : {
        "creation_date" : "1599466763200",
        "number_of_shards" : "1",
        "number_of_replicas" : "1",
        "uuid" : "RGo65wLDRBm095_T-KF8aQ",
        "version" : {
          "created" : "7090199"
        },
        "provided_name" : "book"
      }
    }
  }
}


### 索引的建立与删除
注意：
类似的数据放在一个索引，非类似的数据放不同索引
索引名称必须是小写的，不能用下划线开头，不能包含逗号

1.直接创建索引
curl -XPUT http://localhost:9200/index_test_01

2.创建索引时还可以配置分片信息及Type映射信息等
curl -XPUT http://localhost:9200/index_test_02 -H "Content-Type:application/json" -d '{"settings":{"number_of_shards":"1","number_of_replicas":1}}'

但是window下会报错：
{"error":{"root_cause":[{"type":"not_x_content_exception","reason":"Compressor detection can only be called on some xcontent bytes or compressed xcontent bytes"}],"type":"not_x_content_exception","reason":"Compressor detection can only be called on some xcontent bytes or compressed xcontent bytes"},"status":500}

应该如下：
curl -XPUT http://localhost:9200/index_test_02 -H "Content-Type:application/json" -d "{"""settings""":{"""number_of_shards""":"""1""","""number_of_replicas""":1}}"

3.删除索引
curl -XDELETE http://localhost:9200/index_test_02



### 查询Type映射信息(表结构信息)
curl -XGET http://localhost:9200/book/_mapping?pretty
{
  "book" : {
    "mappings" : {
      "properties" : {
        "content" : {
          "type" : "text",
          "fields" : {
            "keyword" : {
              "type" : "keyword",
              "ignore_above" : 256
            }
          }
        },
        "page" : {
          "type" : "long"
        }
      }
    }
  }
}


### 按照文档id查询
其中_doc是默认的Type名,如果自定义了要换成自己的
curl -XGET http://localhost:9200/book/_doc/j4OlZ3QBL_7nQBql9vhz?pretty
{
  "_index" : "book",
  "_type" : "_doc",
  "_id" : "j4OlZ3QBL_7nQBql9vhz",
  "_version" : 1,
  "_seq_no" : 0,
  "_primary_term" : 1,
  "found" : true,
  "_source" : {
    "page" : 8,
    "content" : "chenqionghe鍠滄杩愬姩锛岀怀鍛芥槸濡傛鐨勭簿褰╋紝缁冲懡鏄涔堢殑杈夌厡"
  }
}

文档原始内容
curl -XGET http://localhost:9200/book/_doc/j4OlZ3QBL_7nQBql9vhz/_source?pretty



## ES  CRUD
es会自动建立index和type，不需要提前创建，而且es默认会对document每个field都建立倒排索引，让其可以被搜索

1.创建商品：
PUT /ecommerce/product/1
{
	"name" : "gaolujie yagao",
	"desc" : "gaoxiao meibai",
	"price" : 30,
	"producer" : "gaolujie producer",
	"tags": [ "meibai", "fangzhu" ]
}

2.检索商品：
GET /ecommerce/product/1

3.修改商品：替换文档
PUT /ecommerce/product/1
{
"name" : "jiaqiangban gaolujie yagao",
"desc" : "gaoxiao meibai",
"price" : 30,
"producer" : "gaolujie producer",
"tags": [ "meibai", "fangzhu" ]
}


替换方式有一个不好，即使必须带上所有的field，才能去进行信息的修改


4.修改商品：更新文档
POST /ecommerce/product/1/_update
{
	"doc": {
		"name": "jiaqiangban gaolujie yagao"
	}
}




基本查询
https://www.jianshu.com/p/ecc04ce13422



## 原理与架构

### 文档id生成方式
1.手动指定
put /index/type/66
通常是把其他系统的已有的数据导入到es时

2.由es生成id值
put /index/type
es生成的id长度为20个字符,使用的是base64编码,URL安全,使用的是GUID算法,分布式下并发生成id值时不会冲突


### 替换或更新文档
替换方式：
PUT /lib/user/4
{ 
	"first_name" : "Jane",
	"last_name" :   "Lucy",
	"age" :         24,
	"about" :       "I like to collect rock albums",
	"interests":  [ "music" ]
}
修改方式(partial update)：
查询出document然后使用用户提交过来的数据更新到document中,已有的document被标记为deleted,创建一个新的document
POST /lib/user/2/_update
{
    "doc":{
       "age":26
     }
}
总结:
1.post方式比put方式网络数据传输的次数要少,从而提高了性能,post方式从查询文档到修改文档再到创建新的文档都是在es内部实现的;
2.post方式发生并发冲突的可能性降低,put方式发生并发冲突的可能性比较大

删除文档：标记为deleted，随着数据量的增加，es会选择合适的时间删除掉


### 基于groovy脚本执行partial update
es有内置的脚本支持,可以基于groovy脚本实现复杂的操作
修改年龄
GET /lib/user/4/_update
{
  "script":"ctx._source.age+=1"
}







###  centos  安装

1.修改系统参数
修改系统参数的目的是确保系统有足够的资源启动Elasticsearch。

a)设置内核参数
# vi /etc/sysctl.conf

增加以下参数
vm.max_map_count=655360

b)执行以下命令确保配置生效。
# sysctl -p

c)设置资源参数
# vi /etc/security/limits.conf

# 修改如下
* soft nofile 65536
* hard nofile 65536


2.添加用户及用户组、修改目录及文件所有者
groupadd elasticgroup
useradd -d /usr/local/elastic -g elasticgroup elastic
chown -R elastic:elasticgroup /usr/local/elasticsearch 

3.修改配置文件
elasticsearch.yml
cluster.name,node.name等注释去掉
network.host: 0.0.0.0
http.port: 9200


4.启动
./bin/elasticsearch -d 后台起动
或者 
nohup sh ./bin/elasticsearch &

查看是否成功
ps -ef | grep elastic
http://localhost:9200





