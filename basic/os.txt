
# 操作系统
操作系统(OS)、计算机原理相关知识

## 为什么主引导记录的内存地址是0x7C00？
CS=0000h IP=7c00h
为什么不存入内存的头部、尾部、或者其他位置，而偏偏存入这个比 32KB 小1024字节的地方？

```txt
+--------------------- 0x0
| Interrupts vectors
+--------------------- 0x400
| BIOS data area
+--------------------- 0x5??
| OS load area
+--------------------- 0x7C00
| Boot sector
+--------------------- 0x7E00
| Boot data/stack
+--------------------- 0x7FFF
| (not used)
+--------------------- (...)
```

> 前面要放置中断处理程序数据、BIOS数据、os数据
> End - Start + 1 = Len    =>   Start = End - Len + 1
> so Start = 0x7FFF - 512 -512 + 1 = 0x7FFF - 0x0400 + 1 = 0x7BFF + 1 = 0x7C00

> 阮一峰：
> 1.为什么主引导记录的内存地址是0x7C00？
	http://www.ruanyifeng.com/blog/2015/09/0x7c00.html#comment-text
> 2.计算机是如何启动的？
	http://www.ruanyifeng.com/blog/2013/02/booting.html

	
## BIOS
开机启动后默认的CS=FFFFh IP=0000h。这个地址就是bios的地址

BIOS的工作相当简单，主要的工作就是执行主机自检（POST），然后查找操作系统存在在哪个磁盘上，将操作系统载入。
BIOS在查找各磁盘 的操作系统时，主要是查找磁盘上的第一个扇区（0面0磁道1扇区），
每个扇区是512字节，如果这是一个引导扇区，那么就将它载入0x7C00的内存地址上，然后跳转到此地址上执行。
如果此不是一个引导扇区，就继续查找下一个磁盘，看其上面是否存在引导扇区。
如果所有的磁盘上都不存在引导扇区，则在屏幕上 打印出一条出错信息。

8086规 定，CPU均从0xFFFF0处开始执行，而在0xFFFF0处，放一条无条件转移指令JMP。
如果A厂的BIOS是从0xFFC00开始放的，那么这条转移指令就跳转到0xFFC00处开始执行。
如果B厂的BIOS是从0xFF800开始放的，那么这条转移指令就跳转到0xFF800处开始执行。
各个厂 家可以跟据自己所生产的BIOS程序的大小，来决定此转移指令具体跳转到的位置。



https://blog.csdn.net/low5252/article/details/104373571

硬核讲解计算机的启动过程
https://www.cnblogs.com/flashsun/p/12218813.html


## MBR与DPT
MBR（Main Boot Record 主引导记录区）位于整个硬盘的0磁道0柱面1扇区、只占用前面的446个字节。
另外的64个字节交给了 DPT（Disk Partition Table硬盘分区表），最后两个字节“55，AA”是分区的结束标志。

硬盘分区DPT详解
分区表由4项组成，每项16个字节（Byte).共4×16 = 64字节(Byte)。每项描述一个分区的基本信息。
如：(80) (01 01 00) (07) (FE FF FF) (3F 00 00 00) (82 C1 3B 3A)

内容及含义

第1字节
引导标志。若值为80H表示活动分区，若值为00H表示非活动分区。

第2、3、4字节
本分区的起始磁头号、扇区号、柱面号。其中：
    磁头号——第2字节；
    扇区号——第3字节的低6位；
    柱面号——为第3字节高2位+第4字节8位。

第5字节
分区类型符。
    00H——表示该分区未用（即没有指定）；
    06H——FAT16基本分区；
    0BH——FAT32基本分区；
    05H——扩展分区；
    07H——NTFS分区；
    0FH——（LBA模式）扩展分区（83H为Linux分区等）。

第6、7、8字节
本分区的结束磁头号、扇区号、柱面号。其中：
    磁头号——第6字节；
    扇区号——第7字节的低6位；
    柱面号——第7字节的高2位+第8字节。

第9、10、11、12字节
逻辑起始扇区号 ，本分区之前已用了的扇区数。

第13、14、15、16字节
本分区的总扇区数。

分区表上有四项，每一项表示一个分区，所以一个分区表最多只能表示4个分区。主分区表上的4项用来表示主分区和扩展分区的信息。
因为扩展分区最多只能有一个，所以硬盘最多可以有四个主分区或者三个主分区，一个扩展分区。
余下的分区表是表示逻辑分区的。这里有必要阐述一点：逻辑区都是位于扩展分区里面的，并且逻辑分区的个数没有限制。

https://blog.csdn.net/zt_xcyk/article/details/53669383







##  UEFI
https://www.zhihu.com/people/mikewolfwoo





	

## 栈
C语言中栈是向下生长的，参数入栈会使指针递减。可用如下code验证  
int a = 5, b= 6;
printf("pa=%p, pb=%p, size of b:%d, 指针递减说明栈是向下生长的\n", &a, &b, ((long)&a - (long)&b));

c参数入栈是从后往前的，因为可变参数？  
int plus(int x, int y, int z);  
入栈顺序为z y x;  

C语言中堆与栈的内存是接壤的，  
栈是从高地址向低地址发展(向下生长),   
堆是从低地址向高地址发展(向上生长)。  
所以堆栈早晚会碰头(中间也可能有其它区域，如虚拟映射区？)。   
```txt
0x003F +----------+
0x003B |	栈	  | int类型变量4个字节
0x0038 |	\/	  | int a = 5;		
0x0034 |	\/	  | int b = 6;		
	   |          | int z;
	   |		  | int y;
	   |		  | int x;
0x002C +----------+
	   |		  |
	   |		  |
	   |		  |
	   |	/\	  |
0x0003 |	/\	  |
0x0001 |	堆	  |
0x0000 +----------+
```


## 大小端
小端就是数据的高字节存在内存的高地址，低字节存在内存的低地址
大端就是数据的高字节存在内存的低地址，低字节存在内存的高地址

如：0x12345678 十进制：305419896，0x12为高字节，0x78为低字节）
			小端			大端
高地址	
			12(带符号位)	78
			34				56
			56				34
低地址  	78				12(带符号位)

优势：
小端：低节点在低地址，强制类型转换时不需要调整字节了。(转为高精度时不用变化，转为低精度时高位节点丢弃int->short 0x12345678->0x5678)
大端：高节点在低地址，则符号位在第一个节点，容易判断正负。

常见CPU字节序：
1.小端：x86、DEC
2.大端：IBM、SUN、PowerPC
ARM体系的CPU则大小端字节序通吃，具体用哪类字节序则由硬件选择。
ARM芯片默认采用小端，但可以切换为大端
MIPS芯片采用大端，但可以在大小端之间切换

文件存储：bmp小端字节序、jpeg大端字节序
网络：大端字节序，因为TCP/IP将收到的第一个字节当作高节。所以x86架构下的程序要发送网络数据时，通常要转换成大端字节序。
应用层：要根据具体应用协议去区分，比如Mysql通信协议，使用的是the least significant byte first，其实就是小端方式。

数组不会存在大小端问题，大小端决定的是字节数大于等于2的类型的字节存放顺序。


验证：
```c
unsigned int num = 0x12345678;
char n = *(char*)&num;
char n1 = *(((char *)&num)+1);
printf("[%s] low addr:%x, %x\n", n==0x78?"小端":"大端", n, n1);
```
> 结果如右：[小端] low addr:78, 56
> 我的PC处理器为Intel(R)_Core(TM)_i5-6300HQ_CPU_@_2.30GHz，x86_64,证明是小端

JAVA: 是大端
> A class file consists of a stream of 8-bit bytes. 
All 16-bit, 32-bit, and 64-bit quantities are constructed by reading in two, four, and eight consecutive 8-bit bytes, respectively. 
Multibyte data items are always stored in big-endian order, where the high bytes come first. 
In the Java SE platform, this format is supported by interfaces java.io.DataInput and java.io.DataOutput 
and classes such as java.io.DataInputStream and java.io.DataOutputStream.
> 用ByteBuffer.order()可以查看



## 中断
实模式下：中断向量表
	BIOS、DOS
	BIOS会在0x0000处填写中断向量表(Interrupt Vector Table，IVT)并向其中添加中断例程，
		中断向量为4个字节，描述了中断例程段基址和段内偏移地址，中断向量表为1024字节，可知最多能存256个中断向量0x00-0xff。
	BIOS运行期间会扫描0xC000-0xE0000,若在其中某个区域发现2个字节0x55和0xAA时，则意味着该区域对应的ROM有代码存在, 第3个字节的代码长度(512的倍数)。
	
	BIOS 中断占用0x00-0x1F
	DOS 占用0x20-0x27，实际上只占用了0x21这个中断向量，而其具体的子功能是根据ah中的值来区分与实现的。
	
保护模式下：中断描述表(Interrupt Description Table，IDT)
	Linux中断
	类型DOS中断，通过INT 80H进入中断程序 然后再根据eax的值来调用不同的子功能函数。


	

## LDT、GDT
Real Mode:
	16bit,Segment的最大长度为64KB
	总线20-bit
	Segment:Offset  => segment<<4 + offset = 真实物理地址
	
Protected Mode:
	32bit
	总线为32-bit
	纯段式/段页式
	
	Selector:Offset => (GDT[选择子(类似数组下标)] => 基址) + offset
	GDT（Global Descriptor Table）内部每一项为长度为64-bit的段描述符

段选择子是什么？
引用GDT和LDT中的段描述符所描述的段，是通过一个16-bit的数据结构来实现的，这个数据结构叫做Segment Selector——段选择子。它的高13位作为被引用的段描述符在GDT/LDT中的下标索引，bit 2用来指定被引用段描述符被放在GDT中还是到LDT中，bit 0和bit 1是RPL——请求特权等级，被用来做保护目的。
在相应的段寄存器装入Segment Selector，按照这个Segment Selector可以到GDT或LDT中找到相应的Segment Descriptor，这个Segment Descriptor中记录了此段的Base Address，然后加上Offset，就得到了最后的内存地址。

段选择子包括三部分：描述符索引（index）、TI、请求特权级（RPL）。它的index（描述符索引）部分表示所需要的段的描述符在描述符表的位置，由这个位置再根据在GDTR中存储的描述符表基址就可以找到相应的描述符。然后用描述符表中的段基址加上逻辑地址（SEL:OFFSET）的OFFSET就可以转换成线性地址，段选择子中的TI值只有一位0或1，0代表选择子是在GDT选择，1代表选择子是在LDT选择。请求特权级（RPL）则代表选择子的特权级，共有4个特权级（0级、1级、2级、3级）。
关于特权级的说明：任务中的每一个段都有一个特定的级别。每当一个程序试图访问某一个段时，就将该程序所拥有的特权级与要访问的特权级进行比较，以决定能否访问该段。系统约定，CPU只能访问同一特权级或级别较低特权级的段。
例如给出逻辑地址：21h:12345678h 转换为线性地址的步骤如下：
（1）、选择子SEL=21h=0000000000100 0 01b 它代表的意思是：选择子的index=4即选择GDT中的第4个描述符；TI=0代表选择子是在GDT选择；最后的01代表特权级RPL=1
（2）、OFFSET=12345678h若此时GDT第四个描述符中描述的段基址（Base）为11111111h，则线性地址=11111111h+12345678h=23456789h

关系：
计算机由实模式进入到保护模式要加载gdt，保护模式下的段寄存器由16位的选择器与64位的段描述符寄存器构成。
段描述符寄存器： 存储段描述符；
选择器：存储段描述符的索引；
原先实模式下的各个段寄存器作为保护模式下的段选择器，80486中有6个(即CS,SS,DS,ES,FS,GS)16位的段寄存器

GDT可以被放在内存的任何位置，但CPU必须知道GDT的入口，也就是基地址放在哪里，Intel的设计者门提供了一个寄存器GDTR用来存放GDT的入口地址，程序员将GDT设定在内存中某个位置之后，可以通过LGDT指令将GDT的入口地址装入此积存器，从此以后，CPU就根据此寄存器中的内容作为GDT的入口来访问GDT了。GDTR中存放的是GDT在内存中的基地址和其表长界限。
48bit的GDTR的结构：32位基地址+16位的表限制

由GDTR访问GDT是通过“段选择子”（实模式下的段寄存器）来完成的，即：
GDTR（48bit）+Segment Selector（由实模式下的段寄存器充当，16bit）= GDT中的某一项 （64bit）


Tips：
（1）、GDT中的所有描述符(除0项外，包括LDT描述符这种类型的描述符)都指定一个段，GDT中的LDT描述符指定的是一个特殊的段, 这个段中只能存放LDT表，之所以说GDT中一个描述符是一个LDT段的描述符,是因为这个描述符中有属性说明这是一个LDT段.
（2）、
GDTR是一个48位的全局描述符寄存器，高32位存放GDT的基址，低16位存放GDT限长。
LDTR是一个16位的局部描述符寄存器，高13位存放LDT在GDT中的索引值。
GDT类似于一个 “数组” ，“数组元素” 可以是段描述符，也可以是LDT描述符。

例如：
若给定一个逻辑地址是 a:b ，根据逻辑地址的a（段选择符）的T1位确定是选择GDT还是LDT。
a、若是T1位选择GDT，根据GDTR找到GDT的基址，根据a的 3~15位确定它的段描述符X在GDT中的位置（GDTR即基址+a的3-15bit即相对位置）：确定段描述符X，再根据段描述符提取出其中包含的段基址信息，段基址+b（段内偏移），最终确定线性地址。
2）若是T1位选择LDT，根据GDTR找到GDT的基址，根据LDTR的高13位确定它的LDTX描述符在GDT中的位置（GDTR基址+LDTR13bit即相对位置）：确定LDTX描述符。LDTX描述符可以确定LDT的基址（LDTX描述符确定LDT表在内存中的起始位置），再根据段选择符a确定的相对位置，可以确定LDT中的私有段描述符Y。接下来同上面的：再根据段描述符提取出其中包含的段基址信息，段基址+b（段内偏移），最终确定线性地址。

GDT中包含的段描述符X和LDT中包含的私有段描述符Y，所占空间相同。
GDT中包含的段描述符X和GDT中包含的LDT描述符，所占用空间相同。

结论是：LDT不包含在GDT中。GDT中只是包含了LDT描述符（一个指向LDT起始地址的指针）。













	
	